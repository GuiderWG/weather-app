{"ast":null,"code":"var _jsxFileName = \"E:\\\\github\\\\weather-app\\\\src\\\\components\\\\Weather\\\\WeatherContainer.jsx\";\nimport * as axios from 'axios';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { setCurrent, setWeather, toggleIsError, toggleIsFetching } from '../../redux/weatherReducer';\nimport Weather from './Weather';\n\nclass WeatherContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = (currentNum, zip) => {\n      this.props.toggleIsFetching(true);\n      this.props.toggleIsError(false);\n      this.props.setCurrent(currentNum);\n      axios.get(`https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/${zip}/`).then(response => {\n        this.props.setWeather(response.data);\n        this.props.toggleIsFetching(false);\n      }).catch(() => this.props.toggleIsError(true));\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    this.props.toggleIsError(false);\n    axios.get(`https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/615702/`).then(response => {\n      this.props.setWeather(response.data);\n      this.props.toggleIsFetching(false);\n    }).catch(() => this.props.toggleIsError(true));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Weather, Object.assign({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  places: state.weatherPage.places,\n  currentPlace: state.weatherPage.currentPlace,\n  weatherData: state.weatherPage.weatherData,\n  isFetching: state.weatherPage.isFetching,\n  isError: state.weatherPage.isError\n});\n\nexport default connect(mapStateToProps, {\n  setWeather,\n  setCurrent,\n  toggleIsFetching,\n  toggleIsError\n})(WeatherContainer);","map":{"version":3,"sources":["E:/github/weather-app/src/components/Weather/WeatherContainer.jsx"],"names":["axios","React","connect","setCurrent","setWeather","toggleIsError","toggleIsFetching","Weather","WeatherContainer","Component","onPageChanged","currentNum","zip","props","get","then","response","data","catch","componentDidMount","render","mapStateToProps","state","places","weatherPage","currentPlace","weatherData","isFetching","isError"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,aAAjC,EAAgDC,gBAAhD,QAAwE,4BAAxE;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,gBAAN,SAA+BP,KAAK,CAACQ,SAArC,CAA+C;AAAA;AAAA;;AAAA,SAa7CC,aAb6C,GAa7B,CAACC,UAAD,EAAaC,GAAb,KAAqB;AACnC,WAAKC,KAAL,CAAWP,gBAAX,CAA4B,IAA5B;AACA,WAAKO,KAAL,CAAWR,aAAX,CAAyB,KAAzB;AACA,WAAKQ,KAAL,CAAWV,UAAX,CAAsBQ,UAAtB;AACAX,MAAAA,KAAK,CACFc,GADH,CACQ,gFAA+EF,GAAI,GAD3F,EAEGG,IAFH,CAESC,QAAD,IAAc;AAClB,aAAKH,KAAL,CAAWT,UAAX,CAAsBY,QAAQ,CAACC,IAA/B;AACA,aAAKJ,KAAL,CAAWP,gBAAX,CAA4B,KAA5B;AACD,OALH,EAMGY,KANH,CAMS,MAAM,KAAKL,KAAL,CAAWR,aAAX,CAAyB,IAAzB,CANf;AAOD,KAxB4C;AAAA;;AAC7Cc,EAAAA,iBAAiB,GAAG;AAClB,SAAKN,KAAL,CAAWP,gBAAX,CAA4B,IAA5B;AACA,SAAKO,KAAL,CAAWR,aAAX,CAAyB,KAAzB;AACAL,IAAAA,KAAK,CACFc,GADH,CACQ,sFADR,EAEGC,IAFH,CAESC,QAAD,IAAc;AAClB,WAAKH,KAAL,CAAWT,UAAX,CAAsBY,QAAQ,CAACC,IAA/B;AACA,WAAKJ,KAAL,CAAWP,gBAAX,CAA4B,KAA5B;AACD,KALH,EAMGY,KANH,CAMS,MAAM,KAAKL,KAAL,CAAWR,aAAX,CAAyB,IAAzB,CANf;AAOD;;AAeDe,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,OAAD,oBAAa,KAAKP,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF;AAGD;;AA9B4C;;AAiC/C,MAAMQ,eAAe,GAAIC,KAAD,KAAY;AAClCC,EAAAA,MAAM,EAAED,KAAK,CAACE,WAAN,CAAkBD,MADQ;AAElCE,EAAAA,YAAY,EAAEH,KAAK,CAACE,WAAN,CAAkBC,YAFE;AAGlCC,EAAAA,WAAW,EAAEJ,KAAK,CAACE,WAAN,CAAkBE,WAHG;AAIlCC,EAAAA,UAAU,EAAEL,KAAK,CAACE,WAAN,CAAkBG,UAJI;AAKlCC,EAAAA,OAAO,EAAEN,KAAK,CAACE,WAAN,CAAkBI;AALO,CAAZ,CAAxB;;AAQA,eAAe1B,OAAO,CAACmB,eAAD,EAAkB;AACtCjB,EAAAA,UADsC;AAEtCD,EAAAA,UAFsC;AAGtCG,EAAAA,gBAHsC;AAItCD,EAAAA;AAJsC,CAAlB,CAAP,CAKZG,gBALY,CAAf","sourcesContent":["import * as axios from 'axios';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { setCurrent, setWeather, toggleIsError, toggleIsFetching } from '../../redux/weatherReducer';\nimport Weather from './Weather';\n\nclass WeatherContainer extends React.Component {\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    this.props.toggleIsError(false);\n    axios\n      .get(`https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/615702/`)\n      .then((response) => {\n        this.props.setWeather(response.data);\n        this.props.toggleIsFetching(false);\n      })\n      .catch(() => this.props.toggleIsError(true));\n  }\n\n  onPageChanged = (currentNum, zip) => {\n    this.props.toggleIsFetching(true);\n    this.props.toggleIsError(false);\n    this.props.setCurrent(currentNum);\n    axios\n      .get(`https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/${zip}/`)\n      .then((response) => {\n        this.props.setWeather(response.data);\n        this.props.toggleIsFetching(false);\n      })\n      .catch(() => this.props.toggleIsError(true));\n  };\n\n  render() {\n    return (\n      <Weather {...this.props} />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  places: state.weatherPage.places,\n  currentPlace: state.weatherPage.currentPlace,\n  weatherData: state.weatherPage.weatherData,\n  isFetching: state.weatherPage.isFetching,\n  isError: state.weatherPage.isError,\n});\n\nexport default connect(mapStateToProps, {\n  setWeather,\n  setCurrent,\n  toggleIsFetching,\n  toggleIsError,\n})(WeatherContainer);\n"]},"metadata":{},"sourceType":"module"}